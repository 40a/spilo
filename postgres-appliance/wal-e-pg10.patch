diff --git a/wal_e/worker/pg/psql_worker.py b/wal_e/worker/pg/psql_worker.py
index a80c214..c7af05c 100644
--- a/wal_e/worker/pg/psql_worker.py
+++ b/wal_e/worker/pg/psql_worker.py
@@ -79,6 +79,8 @@ class PgBackupStatements(object):
 
     """
 
+    _WAL_NAME = None  # Lazy set to 'wal' or 'xlog' depending on version
+
     @staticmethod
     def _dict_transform(csv_reader):
         rows = list(csv_reader)
@@ -86,6 +88,24 @@ class PgBackupStatements(object):
         return dict(list(zip(*rows)))
 
     @classmethod
+    def _wal_name(cls):
+        """
+        Sets and returns _WAL_NAME to 'wal' or 'xlog' depending on
+        version of postgres we are working with.
+
+        It is used for handling xlog -> wal rename in postgres v10
+
+        """
+        if cls._WAL_NAME is None:
+            version = cls._dict_transform(psql_csv_run(
+                    "SELECT current_setting('server_version_num')"))
+            if int(version['current_setting']) >= 100000:
+                cls._WAL_NAME = 'wal'
+            else:
+                cls._WAL_NAME = 'xlog'
+        return cls._WAL_NAME
+
+    @classmethod
     def run_start_backup(cls):
         """
         Connects to a server and attempts to start a hot backup
@@ -108,8 +128,8 @@ class PgBackupStatements(object):
         return cls._dict_transform(psql_csv_run(
                 "SELECT file_name, "
                 "  lpad(file_offset::text, 8, '0') AS file_offset "
-                "FROM pg_xlogfile_name_offset("
-                "  pg_start_backup('{0}'))".format(label),
+                "FROM pg_{0}file_name_offset("
+                "  pg_start_backup('{1}'))".format(cls._wal_name(), label),
                 error_handler=handler))
 
     @classmethod
@@ -128,8 +148,9 @@ class PgBackupStatements(object):
         return cls._dict_transform(psql_csv_run(
                 "SELECT file_name, "
                 "  lpad(file_offset::text, 8, '0') AS file_offset "
-                "FROM pg_xlogfile_name_offset("
-                "  pg_stop_backup())", error_handler=handler))
+                "FROM pg_{0}file_name_offset("
+                "  pg_stop_backup())".format(cls._wal_name()),
+                error_handler=handler))
 
     @classmethod
     def pg_version(cls):
