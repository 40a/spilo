TODO items:

Done:
  initialize the appliance with certain parameters,
  like the cluster name and the adddress of etcd.
  Use those parameters when configuring the governor,
  and etcd-proxy.

Done:
   run etcd proxy instead of full-scale etcd

Cancelled, since we are not going to use haproxye:
  configure haproxy to fetch information from
  the etcd-proxy and point to the acting master

In progress:
- use WAL-E to ship backups and WAL segments to S3

Currently, WAL-E is installed on the Docker image, but not configured.
The way it is planned to be implemented ATM is:

- the governor creates a bucket, which is named by convention, i.e.:
  s3://example/acid/postgres/cluster_name/wal

- the AMI is set on the image (currently it's not setting S3FullAccess, TBD to figure out why)
- governor adds WAL-e archive_command to o the recovery conf, i.e 
     'wal-e --aws-instance-profile --s3-prefix=s3://zalando/acid/postgres/$SCOPE/wal wal-push "%p"'
  and to restore_command:
     'wal-e --aws-instance-profile --s3-prefix=s3://zalando/acid/postgres/$SCOPE/wal wal-fetch "%f" "%p"'

Additionally, backup policy should be set and regular base backups should be configured in such a way,
that only a certain amount of base backups and WAL segments is stored on AWS (via wal-e delete before)
We might also use the support for backup encryption/compression provided by  WAL-E.

- ship PostgreSQL logs somewhere (TBD)

Out of scope for the docker appliance:

- launch the auto-scaling group on AWS, create DNS names

- create S3 buckets and related instance profiles for WAL-E

- mount extrernal storage (EBS or SSD) to a certain directory
  in Docker
